// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Address {
  id        String      @id @default(cuid())
  city      String
  district  String
  street    String
  Recipient Recipient[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ShoppingItem {
  id                    String     @id @default(cuid())
  itemName              String     @unique
  itemSubtitle          String
  itemDescription       String
  imageSrc              String
  imageAlt              String
  itemPrice             Int
  itemSpecialPrice      Int?
  itemAvailableQuantity Int        @default(0)
  updatedAt             DateTime   @updatedAt
  createdAt             DateTime   @default(now())
  cartItem              CartItem[]
}

model LogisticsMethod {
  id            String          @id @default(cuid())
  logisticsType String
  logisticsMode String
  logisticsName String
  freight       Int
  payment       Int
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  goodsDelivery GoodsDelivery[]
  recipient     Recipient[]

  @@unique([logisticsType, logisticsMode])
}

model Coupon {
  id            String          @id @default(cuid())
  code          String          @unique
  name          String
  description   String
  threshold     Int
  active        Boolean
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  GoodsDelivery GoodsDelivery[]
}

model CartItem {
  id              String         @id @default(cuid())
  shoppingItem    ShoppingItem   @relation(fields: [shoppingItemId], references: [id])
  shoppingItemId  String
  quantity        Int
  subtotal        Int
  updatedAt       DateTime       @updatedAt
  createdAt       DateTime       @default(now())
  GoodsDelivery   GoodsDelivery? @relation(fields: [goodsDeliveryId], references: [id])
  goodsDeliveryId String?
}

model Recipient {
  id            String            @id @default(cuid())
  name          String
  cellphone     String
  email         String
  gender        String
  timeToReceive String
  note          String?
  updatedAt     DateTime          @updatedAt
  createdAt     DateTime          @default(now())
  address       Address           @relation(fields: [addressId], references: [id])
  addressId     String
  favLogistics  LogisticsMethod[]
  historyOrder  GoodsDelivery[]
}

model GoodsDelivery {
  id                String          @id @default(cuid())
  cartItem          CartItem[]
  subtotal          Int
  logistics         LogisticsMethod @relation(fields: [logisticsMethodId], references: [id])
  logisticsMethodId String
  recipient         Recipient       @relation(fields: [recipientId], references: [id])
  recipientId       String
  coupon            Coupon?         @relation(fields: [couponId], references: [id])
  couponId          String?
  updatedAt         DateTime        @updatedAt
  createdAt         DateTime        @default(now())
}
